# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'GuildleveExperienceCalculation.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import time

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QBrush, QColor, QIntValidator
from PyQt5.QtWidgets import QAbstractItemView, QTableWidgetItem, QMessageBox
from base.loadlifuxlsx import *
from base.level import *


class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(985, 776)
        self.kemu = QtWidgets.QPushButton(Dialog)
        self.kemu.setGeometry(QtCore.QRect(20, 20, 51, 51))
        self.kemu.setObjectName("kemu")
        self.duantie = QtWidgets.QPushButton(Dialog)
        self.duantie.setGeometry(QtCore.QRect(20, 90, 51, 51))
        self.duantie.setObjectName("duantie")
        self.zhujia = QtWidgets.QPushButton(Dialog)
        self.zhujia.setGeometry(QtCore.QRect(20, 160, 51, 51))
        self.zhujia.setObjectName("zhujia")
        self.diaojin = QtWidgets.QPushButton(Dialog)
        self.diaojin.setGeometry(QtCore.QRect(20, 230, 51, 51))
        self.diaojin.setObjectName("diaojin")
        self.zhige = QtWidgets.QPushButton(Dialog)
        self.zhige.setGeometry(QtCore.QRect(20, 300, 51, 51))
        self.zhige.setObjectName("zhige")
        self.caiyi = QtWidgets.QPushButton(Dialog)
        self.caiyi.setGeometry(QtCore.QRect(20, 370, 51, 51))
        self.caiyi.setObjectName("caiyi")
        self.lianjin = QtWidgets.QPushButton(Dialog)
        self.lianjin.setGeometry(QtCore.QRect(20, 440, 51, 51))
        self.lianjin.setObjectName("lianjin")
        self.chuzi = QtWidgets.QPushButton(Dialog)
        self.chuzi.setGeometry(QtCore.QRect(20, 510, 51, 51))
        self.chuzi.setObjectName("chuzi")
        self.querendengji = QtWidgets.QPushButton(Dialog)
        self.querendengji.setGeometry(QtCore.QRect(200, 30, 41, 31))
        self.querendengji.setObjectName("querendengji")
        self.textEdit = QtWidgets.QTextEdit(Dialog)
        self.textEdit.setGeometry(QtCore.QRect(100, 30, 41, 31))
        self.textEdit.viewport().setProperty("cursor", QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.textEdit.setObjectName("textEdit")
        self.textEdit_2 = QtWidgets.QTextEdit(Dialog)
        self.textEdit_2.setGeometry(QtCore.QRect(150, 30, 41, 31))
        self.textEdit_2.setObjectName("textEdit_2")
        self.pushButton = QtWidgets.QPushButton(Dialog)
        self.pushButton.setGeometry(QtCore.QRect(100, 80, 131, 31))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(Dialog)
        self.pushButton_2.setGeometry(QtCore.QRect(100, 130, 131, 31))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(Dialog)
        self.pushButton_3.setGeometry(QtCore.QRect(100, 180, 131, 31))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_4 = QtWidgets.QPushButton(Dialog)
        self.pushButton_4.setGeometry(QtCore.QRect(100, 230, 131, 31))
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_5 = QtWidgets.QPushButton(Dialog)
        self.pushButton_5.setGeometry(QtCore.QRect(100, 280, 131, 31))
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_6 = QtWidgets.QPushButton(Dialog)
        self.pushButton_6.setGeometry(QtCore.QRect(100, 330, 131, 31))
        self.pushButton_6.setObjectName("pushButton_6")
        self.tableWidget_2 = QtWidgets.QTableWidget(Dialog)
        self.tableWidget_2.setGeometry(QtCore.QRect(90, 380, 881, 171))
        self.tableWidget_2.setObjectName("tableWidget_2")
        self.tableWidget_2.setColumnCount(8)
        self.tableWidget_2.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setPointSize(9)
        item.setFont(font)
        self.tableWidget_2.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(7, item)
        self.tableWidget_3 = QtWidgets.QTableWidget(Dialog)
        self.tableWidget_3.setGeometry(QtCore.QRect(260, 20, 601, 341))
        self.tableWidget_3.setObjectName("tableWidget_3")
        self.tableWidget_3.setColumnCount(6)
        self.tableWidget_3.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_3.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_3.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_3.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_3.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_3.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_3.setHorizontalHeaderItem(5, item)
        self.lineEdit = QtWidgets.QLineEdit(Dialog)
        self.lineEdit.setGeometry(QtCore.QRect(130, 580, 111, 31))
        self.lineEdit.setObjectName("lineEdit")
        self.progressBar = QtWidgets.QProgressBar(Dialog)
        self.progressBar.setGeometry(QtCore.QRect(600, 570, 241, 16))
        self.progressBar.setProperty("value", 24)
        self.progressBar.setObjectName("progressBar")
        self.pushButton_7 = QtWidgets.QPushButton(Dialog)
        self.pushButton_7.setGeometry(QtCore.QRect(750, 690, 111, 51))
        self.pushButton_7.setObjectName("pushButton_7")
        self.plainTextEdit_3 = QtWidgets.QPlainTextEdit(Dialog)
        self.plainTextEdit_3.setGeometry(QtCore.QRect(250, 580, 61, 31))
        self.plainTextEdit_3.setObjectName("plainTextEdit_3")
        self.lineEdit_2 = QtWidgets.QLineEdit(Dialog)
        self.lineEdit_2.setGeometry(QtCore.QRect(510, 570, 81, 51))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.textEdit_4 = QtWidgets.QTextEdit(Dialog)
        self.textEdit_4.setGeometry(QtCore.QRect(600, 590, 40, 31))
        self.textEdit_4.setObjectName("textEdit_4")
        self.lineEdit_3 = QtWidgets.QLineEdit(Dialog)
        self.lineEdit_3.setGeometry(QtCore.QRect(130, 630, 111, 31))
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.plainTextEdit_5 = QtWidgets.QPlainTextEdit(Dialog)
        self.plainTextEdit_5.setGeometry(QtCore.QRect(250, 630, 121, 31))
        self.plainTextEdit_5.setObjectName("plainTextEdit_5")
        self.textEdit_6 = QtWidgets.QTextEdit(Dialog)
        self.textEdit_6.setGeometry(QtCore.QRect(660, 590, 180, 31))
        self.textEdit_6.setObjectName("textEdit_6")
        self.pushButton_8 = QtWidgets.QPushButton(Dialog)
        self.pushButton_8.setGeometry(QtCore.QRect(880, 270, 51, 51))
        self.pushButton_8.setObjectName("pushButton_8")
        self.pushButton_9 = QtWidgets.QPushButton(Dialog)
        self.pushButton_9.setGeometry(QtCore.QRect(880, 170, 51, 51))
        self.pushButton_9.setObjectName("pushButton_9")
        self.textEdit_3 = QtWidgets.QTextEdit(Dialog)
        self.textEdit_3.setGeometry(QtCore.QRect(890, 230, 31, 31))
        self.textEdit_3.viewport().setProperty("cursor", QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.textEdit_3.setObjectName("textEdit_3")

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

        self.tableWidget_3.setSelectionBehavior(QAbstractItemView.SelectRows)

        intValidator = QIntValidator()
        # 列宽
        self.tableWidget_3.horizontalHeader().resizeSection(0, 30)
        self.tableWidget_3.horizontalHeader().resizeSection(1, 175)
        self.tableWidget_3.horizontalHeader().resizeSection(2, 60)
        self.tableWidget_3.horizontalHeader().resizeSection(3, 80)
        self.tableWidget_3.horizontalHeader().resizeSection(4, 50)
        self.tableWidget_3.horizontalHeader().resizeSection(5, 150)
        # self.tableWidget_3.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.tableWidget_2.horizontalHeader().resizeSection(0, 30)      # 等级
        self.tableWidget_2.horizontalHeader().resizeSection(1, 250)     # 理符名称
        self.tableWidget_2.horizontalHeader().resizeSection(2, 130)      # 接取位置
        self.tableWidget_2.horizontalHeader().resizeSection(3, 100)      # 经验
        self.tableWidget_2.horizontalHeader().resizeSection(4, 80)      # 金币
        self.tableWidget_2.horizontalHeader().resizeSection(5, 120)      # 道具名字
        self.tableWidget_2.horizontalHeader().resizeSection(6, 60)      # 道具数量
        self.tableWidget_2.horizontalHeader().resizeSection(7, 60)      # 理符数量
        # self.tableWidget_2.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)

        # 不可编辑
        # self.tableWidget_3.setEditTriggers(QAbstractItemView.NoEditTriggers)
        # +默认不可选中
        self.pushButton_8.setEnabled(False)

        # 设置选择职业按钮后的操作
        self.now_job = ''
        self.kemu.clicked.connect(lambda: self.job_check('kemu'))
        self.duantie.clicked.connect(lambda: self.job_check('duantie'))
        self.zhujia.clicked.connect(lambda: self.job_check('zhujia'))
        self.diaojin.clicked.connect(lambda: self.job_check('diaojin'))
        self.zhige.clicked.connect(lambda: self.job_check('zhige'))
        self.caiyi.clicked.connect(lambda: self.job_check('caiyi'))
        self.lianjin.clicked.connect(lambda: self.job_check('lianjin'))
        self.chuzi.clicked.connect(lambda: self.job_check('chuzi'))

        # 重置按钮
        self.pushButton_7.clicked.connect(lambda: self.reset())

        # 选择版本的操作
        self.pushButton.clicked.connect(lambda: self.version_check(0))
        self.pushButton_2.clicked.connect(lambda: self.version_check(1))
        self.pushButton_3.clicked.connect(lambda: self.version_check(2))
        self.pushButton_4.clicked.connect(lambda: self.version_check(3))
        self.pushButton_5.clicked.connect(lambda: self.version_check(4))
        self.pushButton_6.clicked.connect(lambda: self.version_check(5))

        # 理符加减
        self.tableWidget_3.cellPressed.connect(self.get_table_check)
        # 理符+
        self.textEdit_3.setText('1')
        self.pushButton_8.clicked.connect(lambda: self.add_checked_lifu(self.textEdit_3.toPlainText()))
        # print(self.textEdit_3.toPlainText())

        # 等级和进度条初始化
        self.textEdit.setText('1')
        self.textEdit_2.setText('90')
        self.lva = self.textEdit.toPlainText()
        self.lvb = self.textEdit_2.toPlainText()
        self.progressBar.reset()
        self.overflow_exp = 0
        self.add_exp = 0
        self.querendengji.clicked.connect(lambda: self.get_level())
        # 用于记录已选择理符的理符名称主键
        self.lifu_name = []
        self.con_lifu = 0
        self.gil = 0
        # 减号按钮 问就是没做
        self.pushButton_9.setVisible(False)

    def load_lifu_xlsx(self, table, job, sheet):
        """加载理符xlsx"""
        items = LoadLifuXlsx().get_value(str(job), sheet)
        for i in range(len(items)):
            item = items[i]
            row = table.rowCount()
            table.insertRow(row)
            for j in range(len(item)):
                item = QTableWidgetItem(str(items[i][j]))
                table.setItem(row, j, item)

    def job_check(self, job):
        self.now_job = ''
        self.job_list = [self.kemu, self.duantie, self.zhujia, self.diaojin, self.zhige, self.caiyi, self.lianjin, self.chuzi]
        for button in self.job_list:
            button.setEnabled(False)

        if job == 'kemu':
            self.now_job = 'kemu'
            self.kemu.setEnabled(True)

        elif job == 'duantie':
            self.now_job = 'duantie'
            self.duantie.setEnabled(True)

            self.kemu.setVisible(True)
        elif job == 'zhujia':
            self.now_job = 'zhujia'
            self.zhujia.setEnabled(True)

        elif job == 'diaojin':
            self.now_job = 'diaojin'
            self.diaojin.setEnabled(True)

        elif job == 'zhige':
            self.now_job = 'zhige'
            self.zhige.setEnabled(True)

        elif job == 'caiyi':
            self.now_job = 'caiyi'
            self.caiyi.setEnabled(True)

        elif job == 'lianjin':
            self.now_job = 'lianjin'
            self.lianjin.setEnabled(True)

        elif job == 'chuzi':
            self.now_job = 'chuzi'
            self.chuzi.setEnabled(True)

        elif job is None:
            for button in self.job_list:
                button.setEnabled(True)

        else:
            pass

    def version_check(self, version):
        """
        :param version:
        0=重生之境
        1=苍穹之禁城
        2=苍穹之禁城大规模
        3=红莲之狂潮
        4=暗影之逆焰
        5=晓月之终途
        :return: 无
        """
        # 清空所有理符行
        if self.now_job == '':
            self.alert_message('提示', '请先选择职业！')
            return
        for i in reversed(range(self.tableWidget_3.rowCount())):
            self.tableWidget_3.removeRow(i)
        # 从xlsx加载理符
        self.load_lifu_xlsx(table=self.tableWidget_3, job=self.now_job, sheet=version)

    def get_table_check(self, row, col):
        """读取选中行 进self.check_lifu"""
        self.check_lifu = []
        self.pushButton_8.setEnabled(True)
        try:
            for i in range(6):
                content = self.tableWidget_3.item(row, i).text()
                self.check_lifu.append(content)
            # print(self.check_lifu)
        except:
            # print('选中内容为空')
            pass

    def add_checked_lifu(self, multiple=1):
        """将选中的理符添加到table2"""
        self.pushButton_8.setEnabled(False)
        self.pushButton_9.setEnabled(False)
        if int(self.lva) == 90:
            return
        multiple = float(multiple)
        if '批发' in self.check_lifu[1]:
            count_exp = float(self.check_lifu[3])*multiple*6
            count_gil = float(self.check_lifu[4])*multiple*6
        else:
            count_exp = float(self.check_lifu[3])*multiple*2
            count_gil = float(self.check_lifu[4])*multiple*2

        if self.check_lifu[1] not in self.lifu_name:
            self.lifu_name.append(self.check_lifu[1])
            """
            如果是新选择的理符 需要
            1.添加self.check_lifu[0, 1, 2]到table 
            2.3列经验为self.check_lifu[3]*multiple, 4列系统金self.check_lifu[4]*multiple,5列self.check_lifu[5]
            3.道具需求数量置为multiple，已选择理符数量置为multiple 
            4.self.con_lifu += multiple
            self.gil += self.check_lifu[4]*multiple
            """
            new_checked_lifu = []
            new_checked_lifu.append(self.check_lifu[0])
            new_checked_lifu.append(self.check_lifu[1])
            new_checked_lifu.append(self.check_lifu[2])

            new_checked_lifu.append(int(count_exp))
            new_checked_lifu.append(int(count_gil))

            # 计算批发需求数量
            if self.check_lifu[5][-1] in ("）", "3", "6", "9"):
                magnification = 1
                if self.check_lifu[5][-1] == "）":
                    magnification = int(self.check_lifu[5][-3])
                    self.check_lifu[5] = self.check_lifu[5][:-4]
                    if self.check_lifu[5][-1] in ("3", "6", "9"):
                        magnification = magnification * int(self.check_lifu[5][-1])
                        self.check_lifu[5] = self.check_lifu[5][:-2]
                        new_checked_lifu.append(self.check_lifu[5])
                        new_checked_lifu.append(int(multiple)*magnification)
                    else:
                        new_checked_lifu.append(self.check_lifu[5])
                        new_checked_lifu.append(int(multiple)*magnification)

                else:   # x369结尾
                    magnification = magnification * int(self.check_lifu[5][-1])
                    self.check_lifu[5] = self.check_lifu[5][:-2]
                    new_checked_lifu.append(self.check_lifu[5])
                    new_checked_lifu.append(int(multiple) * magnification)
            else:
                new_checked_lifu.append(self.check_lifu[5])
                new_checked_lifu.append(int(multiple))
            new_checked_lifu.append(int(multiple))

            # 打印new_checked_lifu到列表table2
            row = self.tableWidget_2.rowCount()
            self.tableWidget_2.insertRow(row)
            for j in range(len(new_checked_lifu)):
                item = QTableWidgetItem(str(new_checked_lifu[j]))
                self.tableWidget_2.setItem(row, j, item)

        else:
            """
            如果选择的理符已在列表中 需要：
            1.获取到列表中选中理符的行号
            2.储存获取到的行中经验3，系统金4，道具需求数量6，已选择理符数量7
            3.经验+self.check_lifu[3]*multiple，系统金+self.check_lifu[4]*multiple
            4.道具需求数量+multiple，已选择理符数量+multiple
            5.修改行号中3467列
            """
            # 1.获取已有的行号
            text = self.check_lifu[1]
            items = self.tableWidget_2.findItems(text, Qt.MatchExactly)

            row = 0
            if len(items) > 0:
                item = items[0]
                row = item.row()
            # 2.储存获取到的行中经验3，系统金4，道具需求数量6，已选择理符数量7
            exp = self.tableWidget_2.item(row, 3).text()
            gil = self.tableWidget_2.item(row, 4).text()
            goods_need = self.tableWidget_2.item(row, 6).text()
            count_lifu = self.tableWidget_2.item(row, 7).text()

            # 倍率
            magnification = int(goods_need)/int(count_lifu)

            # print('经验3，系统金4，道具需求数量6，已选择理符数量7' + exp + gil + goods_need + count_lifu)
            # 3.经验+self.check_lifu[3]*multiple，系统金+self.check_lifu[4]*multiple
            # 4.道具需求数量+multiple，已选择理符数量+multiple
            exp = int(exp)
            exp += int(count_exp)
            gil = int(gil)
            gil += int(count_gil)
            goods_need = int(goods_need)
            goods_need += int(magnification)
            count_lifu = int(count_lifu)
            count_lifu += int(multiple)

            # 更新表格已有数据
            self.tableWidget_2.item(row, 3).setText(str(int(exp)))
            self.tableWidget_2.item(row, 4).setText(str(int(gil)))
            self.tableWidget_2.item(row, 6).setText(str(int(goods_need)))
            self.tableWidget_2.item(row, 7).setText(str(int(count_lifu)))

        # 总数计算器左下角+gil lifu
        self.con_lifu += int(multiple)
        self.gil += int(count_gil)
        self.plainTextEdit_3.setPlainText(str(self.con_lifu))
        self.plainTextEdit_5.setPlainText(str(self.gil))
        # 更新经验模块
        self.get_exp(self.overflow_exp, count_exp)
        self.pushButton_8.setEnabled(True)
        self.pushButton_9.setEnabled(True)

    def reset(self):
        for i in reversed(range(self.tableWidget_3.rowCount())):
            self.tableWidget_3.removeRow(i)
        for i in reversed(range(self.tableWidget_2.rowCount())):
            self.tableWidget_2.removeRow(i)
        self.job_check(job=None)
        self.lifu_name = []
        self.con_lifu = 0
        self.gil = 0
        self.textEdit.setText('1')
        self.textEdit_2.setText('90')
        self.lva = self.textEdit.toPlainText()
        self.lvb = self.textEdit_2.toPlainText()
        self.progressBar.reset()
        self.overflow_exp = 0
        self.add_exp = 0
        self.plainTextEdit_3.setPlainText('0')
        self.plainTextEdit_5.setPlainText('0')
        self.textEdit_4.setPlainText('')
        self.textEdit_6.setPlainText('')
        self.pushButton_8.setEnabled(False)

    def get_level(self):
        self.lva = self.textEdit.toPlainText()
        self.lvb = self.textEdit_2.toPlainText()

    def get_exp(self, overflow_exp, add_exp):
        """选择理符时更新经验模块"""
        a = Exp(int(self.lva), int(self.lvb)).expcal_all(overflow_exp, add_exp)
        self.lva = a[0]
        self.overflow_exp = a[1]
        self.textEdit_4.setText(str(self.lva))
        self.textEdit_6.setText(str(a[1])+'/'+str(a[2]))
        self.progressBar.setValue(a[3])

    def alert_message(self, title, msg):
        msg_box = QMessageBox(QMessageBox.Information, title, msg)
        msg_box.exec_()

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "理符计算器"))
        self.kemu.setText(_translate("Dialog", "刻木匠"))
        self.duantie.setText(_translate("Dialog", "锻铁匠"))
        self.zhujia.setText(_translate("Dialog", "铸甲匠"))
        self.diaojin.setText(_translate("Dialog", "雕金匠"))
        self.zhige.setText(_translate("Dialog", "制革匠"))
        self.caiyi.setText(_translate("Dialog", "裁衣匠"))
        self.lianjin.setText(_translate("Dialog", "炼金术士"))
        self.chuzi.setText(_translate("Dialog", "烹调师"))
        self.querendengji.setText(_translate("Dialog", "确认"))
        self.textEdit.setPlaceholderText(_translate("Dialog", "1"))
        self.textEdit_2.setPlaceholderText(_translate("Dialog", "90"))
        self.pushButton.setText(_translate("Dialog", "重生之境（50级）"))
        self.pushButton_2.setText(_translate("Dialog", "苍穹之禁城（60级）"))
        self.pushButton_3.setText(_translate("Dialog", "苍穹之禁城（60级/大规模）"))
        self.pushButton_4.setText(_translate("Dialog", "红莲之狂潮（70级）"))
        self.pushButton_5.setText(_translate("Dialog", "暗影之逆焰（80级）"))
        self.pushButton_6.setText(_translate("Dialog", "晓月之终途（90级）"))
        item = self.tableWidget_2.horizontalHeaderItem(0)
        item.setText(_translate("Dialog", "等级"))
        item = self.tableWidget_2.horizontalHeaderItem(1)
        item.setText(_translate("Dialog", "理符名称"))
        item = self.tableWidget_2.horizontalHeaderItem(2)
        item.setText(_translate("Dialog", "接取位置"))
        item = self.tableWidget_2.horizontalHeaderItem(3)
        item.setText(_translate("Dialog", "经验"))
        item = self.tableWidget_2.horizontalHeaderItem(4)
        item.setText(_translate("Dialog", "系统金"))
        item = self.tableWidget_2.horizontalHeaderItem(5)
        item.setText(_translate("Dialog", "道具名"))
        item = self.tableWidget_2.horizontalHeaderItem(6)
        item.setText(_translate("Dialog", "道具数量"))
        item = self.tableWidget_2.horizontalHeaderItem(7)
        item.setText(_translate("Dialog", "理符数量"))
        item = self.tableWidget_3.horizontalHeaderItem(0)
        item.setText(_translate("Dialog", "等级"))
        item = self.tableWidget_3.horizontalHeaderItem(1)
        item.setText(_translate("Dialog", "理符名称"))
        item = self.tableWidget_3.horizontalHeaderItem(2)
        item.setText(_translate("Dialog", "接取位置"))
        item = self.tableWidget_3.horizontalHeaderItem(3)
        item.setText(_translate("Dialog", "经验"))
        item = self.tableWidget_3.horizontalHeaderItem(4)
        item.setText(_translate("Dialog", "系统金"))
        item = self.tableWidget_3.horizontalHeaderItem(5)
        item.setText(_translate("Dialog", "道具"))
        self.lineEdit.setText(_translate("Dialog", "已消耗理符数量："))
        self.pushButton_7.setText(_translate("Dialog", "重置所有"))
        self.lineEdit_2.setText(_translate("Dialog", "当前经验值："))
        self.lineEdit_3.setText(_translate("Dialog", "可获取系统金总和："))
        self.pushButton_8.setText(_translate("Dialog", "+"))
        self.pushButton_9.setText(_translate("Dialog", "-"))
        self.textEdit_3.setPlaceholderText(_translate("Dialog", "1"))
